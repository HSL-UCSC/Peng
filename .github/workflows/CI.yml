name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always

jobs:
  nix-build: # Job for Linux and macOS using Nix flakes
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v26
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Cache Nix Store
        uses: actions/cache@v3
        with:
          path: |
            /nix/store
            /nix/var/nix
            ~/.cache/nix
          key: nix-${{ runner.os }}-${{ hashFiles('flake.nix', 'flake.lock') }}
          restore-keys: |
            nix-${{ runner.os }}-

      - name: Install system dependencies (Linux only)
        if: runner.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libudev-dev pkg-config

      - name: Enter Nix flake shell & Build
        run: |
          nix develop --command cargo build --verbose

      - name: Run Tests
        run: |
          nix develop --command cargo test --verbose

      - name: Check Formatting
        run: |
          nix develop --command cargo fmt -- --check

      - name: Run Clippy (Linting)
        run: |
          nix develop --command cargo clippy -- -D warnings

  windows-build:
    runs-on: windows-latest

    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4
        with:
          # this checks out your main PQ repository on default branch
          token: ${{ secrets.GITHUB_TOKEN }}

      # Clone the branch (or folder) that actually holds your .proto files
      # in your case rar/server_init is a branch in the same repo
      - name: Checkout HyRL-protos branch
        uses: actions/checkout@v4
        with:
          repository: HSL-UCSC/Quad-RL
          path: hyrl-protos

      # Now hyrl-protos/ contains protos/hyrl_api/obstacle_avoidance.proto, etc.
      - name: Export OBSTACLE_AVOIDANCE_APIS
        run: |
          echo "OBSTACLE_AVOIDANCE_APIS=${{ github.workspace }}/hyrl-protos" >> $GITHUB_ENV

      - name: Install Protobuf on Windows
        run: |
          choco install cmake --installargs '"ADD_CMAKE_TO_PATH=System"'
          choco install protoc
          protoc --version
          cmake --version

      - name: Build
        run: cargo build --verbose

      - name: Run tests
        run: cargo test --verbose

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run Clippy (Linting)
        run: cargo clippy -- -D warnings

use_rerun: true # Enable visualization using rerun.io
render_depth: true # Enable rendering depth
use_multithreading_depth_rendering: true # Enable multithreading for depth rendering for large resolution (above 32x24)
real_time: true # Enable real time mode. If not enabled, sim will run in fast time.

rerun_blueprint: "config/peng_default_blueprint.rbl"

simulation:
  control_frequency: 50 # Frequency of control loop execution (Hz)
  simulation_frequency: 250 # Frequency of physics simulation updates (Hz)
  log_frequency: 20 # Frequency of data logging (Hz)
  duration: 70.0 # Total duration of the simulation (seconds)
  use_rk4_for_dynamics_update: false # Enable Runge-Kutta 4th order integration for dynamics, otherwise Euler integration is used
  use_rk4_for_dynamics_control: false # Enable Runge-Kutta 4th order integration for dynamics, otherwise Euler integration is used
  gravity: 9.81 # Gravitational acceleration (m/s^2)

quadrotor:
  type: "Betaflight"
  quadrotor_config:
    mass: .417 # Mass of the quadrotor (kg)
    gravity: 9.81 # Gravitational acceleration (m/s^2)
    drag_coefficient: 0.800 # Aerodynamic drag coefficient
    # Inertia matrix [Ixx, Ixy, Ixz, Iyx, Iyy, Iyz, Izx, Izy, Izz] (kg*m^2)
    inertia_matrix: [2.5e-5, 0.0, 0.0, 0.0, 2.5e-5, 0.0, 0.0, 0.0, 4.5e-5]
    max_thrust_kg: 223.
    arm_length_m: .065
    yaw_torque_constant: .0052
  subject_name: "mob6"
  serial_port: "/dev/tty.usbserial-B001JE6N"
  baud_rate: 460800

pid_controller:
  pos_gains: # PID gains for position control
    kp: [7.1, 7.1, 11.9] # Proportional gains [x, y, z]
    kd: [2.4, 2.4, 6.7] # Derivative gains [x, y, z]
    ki: [.1, 0.0, 0.0] # Integral gains [x, y, z]
  att_gains: # PID gains for attitude control
    kp: [1.5, 2.0, 1.0] # Proportional gains [roll, pitch, yaw]
    kd: [0.13, 0.12, 0.1] # Derivative gains [roll, pitch, yaw]
    ki: [0.0, 0.0, 0.0] # Integral gains [roll, pitch, yaw]
  pos_max_int: [10.0, 10.0, 10.0] # Maximum integral error for position control [x, y, z]
  att_max_int: [0.5, 0.5, 0.5] # Maximum integral error for attitude control [roll, pitch, yaw]

angle_limits: [20, 20, 360]

imu:
  accel_noise_std: 0.02 # Standard deviation of accelerometer noise (m/s^2)
  gyro_noise_std: 0.01 # Standard deviation of gyroscope noise (rad/s)
  accel_bias_std: 0.0001 # Standard deviation of accelerometer bias instability (m/s^2)
  gyro_bias_std: 0.0001 # Standard deviation of gyroscope bias instability (rad/s)

maze:
  lower_bounds: [-4.0, -2.0, 0.0] # Lower bounds of the maze [x, y, z] (m)
  upper_bounds: [4.0, 2.0, 2.0] # Upper bounds of the maze [x, y, z] (m)
  num_obstacles: 20 # Number of obstacles in the maze
  obstacles_velocity_bounds: [0.2, 0.2, 0.1] # Maximum velocity of obstacles [x, y, z] (m/s)
  obstacles_radius_bounds: [0.05, 0.1] # Range of obstacle radii [min, max] (m)

camera:
  resolution: [128, 96] # Camera resolution [width, height] (pixels)
  fov_vertical: 90 # Vertical Field of View (degrees)
  near: 0.1 # Near clipping plane (m)
  far: 5.0 # Far clipping plane (m)
  rotation_transform: [0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 0.0, -1.0, 0.0] # Rotates camera to positive x-axis

mesh:
  division: 7 # Number of divisions in the mesh grid
  spacing: 0.5 # Spacing between mesh lines (m)

planner_schedule:
  # Minimum Jerk Line trajectory
  - step: 200 # Simulation step in ms to start this planner
    planner_type: MinimumJerkLine
    params:
      end_position: [0.0, 0.0, 0.5] # Target end position [x, y, z] (m)
      end_yaw: 0.0 # Target end yaw angle (rad)
      duration: 0.5 # Duration of the trajectory (s)

  # Hover
  - step: 1200 # Simulation step in ms to start this planner
    planner_type: Hover
    params:
      end_position: [0.0, 0.0, 0.5] # Target end position [x, y, z] (m)
      target_yaw: 0.0 # Target end yaw angle (rad)
